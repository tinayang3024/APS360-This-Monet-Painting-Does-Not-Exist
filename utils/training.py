# -*- coding: utf-8 -*-
"""Training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tHNeepAwgCIL5P5iGJxJ1au8qiScmqdD

# Import Libraries
"""

import os

"""# Configurations"""

class Options:
  def __init__(self, lr, beta1, lambda_x, lambda_y, n_epochs, direction, pool_size, gpu_ids=None, lr_policy='linear', gan_mode="vanilla"):
    self.lr = lr
    self.beta1 = beta1
    self.gan_mode = gan_mode
    self.lambda_x = lambda_x
    self.lambda_y = lambda_y
    self.gpu_ids = gpu_ids
    self.n_epochs = n_epochs
    self.lr_policy = lr_policy
    self.direction = direction
    self.pool_size = pool_size

"""# Training Functions"""

def train(model, opt, train_loader, plot_outputs=False, plot_losses=False, output_folder=None):
  for epoch in range(opt.n_epochs):
    print("starting on epoch: " + str(epoch))
    model.update_learning_rate()
    for i, data in enumerate(train_loader):
      A_img = data['A']['data']
      B_img = data['B']['data']
      inputs = {}
      inputs['X'] = A_img
      inputs['Y'] = B_img
      model.set_input(inputs)
      model.optimize_parameters()
  print("training done.")
  if (plot_losses or plot_outpts) and output_folder is None:
    print("ouput folder not specificed, storing output to current dir")
    output_folder = os.path.dirname(os.path.realpath(__file__))
  if plot_losses:
    D_losses = {}
    D_losses["D"] = model.all_loss_D
    D_losses["D Fake"] = model.all_loss_D_fake
    D_losses["D Real"] = model.all_loss_D_real
    plot_loss_curve(D_losses, "Discriminator Losses", output_folder)

    # generator plots
    G_losses = {}
    G_losses["G"] = model.all_loss_G
    G_losses["G X"] = model.all_loss_G_x
    G_losses["G Y"] = model.all_loss_G_y
    plot_loss_curve(G_losses, "Generator Losses", output_folder)

    # cycle plots
    Cycle_X_losses = {}
    Cycle_X_losses["Cycle X Loss"] = model.all_loss_cycle_x
    Cycle_Y_losses = {}
    Cycle_Y_losses["Cycle Y Loss"] = model.all_loss_cycle_y
    plot_loss_curve(Cycle_X_losses, "Cycle X Loss", output_folder)
    plot_loss_curve(Cycle_Y_losses, "Cycle Y Loss", output_folder)
    print("finished saving loss plots to " + str(output_folder))
  if plot_outputs:
    # only plotting the last iteration (using index -1)
    print("start saving output images...")
    real_x = model.save_progress[-1]["real_x"]
    fake_y = model.save_progress[-1]["fake_y"]
    rec_x = model.save_progress[-1]["rec_x"]
    real_y = model.save_progress[-1]["real_y"]
    fake_x = model.save_progress[-1]["fake_x"]
    rec_y = model.save_progress[-1]["rec_y"]
    plot_images(real_x, fake_y, rec_x, output_folder)
    plot_images(real_y, fake_x, rec_y, output_folder)
    print("finished saving output images to " + str(output_folder))
  return model